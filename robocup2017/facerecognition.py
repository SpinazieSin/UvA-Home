# Main file for recognizing faces
# Thomas Groot

# Imports #
import vision_definitions
import cv2
import numpy as np
from naoqi import ALProxy
from PIL import Image


class FaceRecognizer(object):
    def __init__(self, previous_recognizer=None):
        if previous_recognizer == None:
            self.recognizer = cv2.createLBPHFaceRecognizer()
        else:
            self.recognizer = previous_recognizer
        self.cascadePath = "haarcascade_frontalface_default.xml"
        self.faceCascade = cv2.CascadeClassifier(self.cascadePath)

    # Train the recognizer
    # Set of images is the list of faces generated by the facedetection
    def train(self, images, labels):
        labels = np.array(labels)
        self.recognizer.train(images, labels)

    # Returns the name of the person in front of the camera
    def recognize(self, video_service):
        resolution = 2
        colorSpace = 11
        # Top camera
        cameraID = 0
        # Create video session
        video_client = video_service.subscribe("python_client", resolution, colorSpace, 5)
        # select camera
        video_service.setParam(vision_definitions.kCameraSelectID, cameraID)
        break_index = 0
        recognized = []
        while len(recognized) == 0 and break_index < 15:
            break_index += 1
            try:
                image = video_service.getImageRemote(video_client)
                if image == None:
                    raise
            except:
                print("Failed image")
                continue
            # Get the image size and pixel array.subscribe
            imageWidth = image[0]
            imageHeight = image[1]
            image_string = str(bytearray(array))
            # Create a PIL Image from our pixel array.
            im = Image.frombytes("RGB", (imageWidth, imageHeight), image_string)
            predict_image_pil = im.convert("L")
            predict_image = np.array(predict_image_pil, "uint8")
            faces = self.faceCascade.detectMultiScale(predict_image)
            # Actually recognize the person
            recognized.append(self.label_faces(faces, predict_image))
        video_service.unsubscribe(video_client)
        return recognized

    # Label the given list of faces with names
    def label_faces(self, faces, predict_image):
        for (x, y, w, h) in faces:
            # Recognize face
            nbr_predicted, conf = self.recognizer.predict(predict_image[y: y + h, x: x + w])
            if conf > 0:
                recognized = nbr_predicted
            return recognized
        return "Nobody"